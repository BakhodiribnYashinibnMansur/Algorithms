package main

// Even Fibonacci numbers

// Problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

func main() {
	evenFibonacciTotal(4000000)
}

func evenFibonacciTotal(target int) {
	totalEvenFibonacci := 0
	current := 0
	next := 1

	for current < target {
		if current%2 == 0 {
			totalEvenFibonacci += current
		}
		fibonacci := current + next
		current = next
		next = fibonacci
	}
	print(totalEvenFibonacci)
}

//Find Fibonacci Number
// var fibonacciList []int
// a := 0
// b := 1
// c := 1
// for i := 0; i < 40; i++ {
// 	c = a + b
// 	a = b
// 	b = c
// 	fibonacciList = append(fibonacciList, c)
// }
// fmt.Println(fibonacciList)

// func fibonacci(n uint) uint {
// 	if n < 2 {
// 		return n
// 	}
// 	var a, b uint
// 	b = 1
// 	for n--; n > 0; n-- {
// 		a += b
// 		a, b = b, a
// 	}
// 	return b
// }
